#!/usr/bin/env node
import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const repoRoot = path.resolve(__dirname, '..');
const componentsDir = path.join(repoRoot, 'src', 'data', 'components');
const outFile = path.join(componentsDir, 'index.js');

function toPosix(p) {
  return p.split(path.sep).join('/');
}

function makeVarName(relPath) {
  // remove extension
  // use only the base filename (no directories)
  let name = path.basename(relPath).replace(/\.[^/.]+$/, '');
  // replace non-alphanum with underscore
  name = name.replace(/[^A-Za-z0-9]+/g, '_');
  if (/^\d/.test(name)) name = '_' + name;
  return name;
}

async function walk(dir) {
  const entries = await fs.readdir(dir, { withFileTypes: true });
  const files = [];
  for (const e of entries) {
    const full = path.join(dir, e.name);
    if (e.isDirectory()) {
      files.push(...await walk(full));
    } else if (e.isFile() && e.name.endsWith('.js')) {
      if (e.name === 'index.js') continue;
      files.push(full);
    }
  }
  return files;
}

async function main() {
  try {
    await fs.access(componentsDir);
  } catch (err) {
    console.error('Components directory not found:', componentsDir);
    process.exit(1);
  }

  const files = await walk(componentsDir);
  const used = [];
  const unused = [];

  for (const f of files) {
    const rel = path.relative(componentsDir, f);
    const parts = rel.split(path.sep);
    if (parts.includes('unused')) unused.push({ full: f, rel });
    else used.push({ full: f, rel });
  }

  const imports = [];
  const exportEntries = [];
  const seen = new Map();

  function addImport(obj, commented = false) {
    const relPosix = toPosix(obj.rel);
    const importPath = './' + relPosix;
    let varName = makeVarName(relPosix);
    if (seen.has(varName)) {
      let i = 1;
      while (seen.has(varName + '_' + i)) i++;
      varName = varName + '_' + i;
    }
    seen.set(varName, importPath);

    const importLine = `import ${varName} from '${importPath}';`;
    const commentedLine = `// ${importLine}`;
    imports.push({ line: commented ? commentedLine : importLine, varName, importPath, commented });

    const key = relPosix.replace(/\.[^/.]+$/, '').split('/').join('_');
    exportEntries.push({ key, varName, commented });
  }

  used.sort((a,b)=>a.rel.localeCompare(b.rel)).forEach(f=>addImport(f, false));
  unused.sort((a,b)=>a.rel.localeCompare(b.rel)).forEach(f=>addImport(f, true));

  const header = `// This file is auto-generated by scripts/collect-components.mjs\n// Do not edit manually â€” run the script to regenerate. card component should be {card} destructured \n\n`;

  const importBlock = imports.map(i => i.line).join('\n');

  const exportLines = exportEntries.map(e => {
    const line = `  '${e.key}': ${e.varName},`;
    return e.commented ? `// ${line}` : line;
  }).join('\n');

  // build named exports block for non-commented imports
  const namedExports = exportEntries
    .filter(e => !e.commented)
    .map(e => `export { ${e.varName} as ${e.key} };`)
    .join('\n');

  const content = `${header}${importBlock}\n\nexport const ComponentsMap = {\n${exportLines}\n};\n\n${namedExports}\n`;

  await fs.writeFile(outFile, content, 'utf8');
  console.log('Wrote', outFile);
  console.log(`Imported ${used.length} component(s), ${unused.length} unused component(s) commented.`);
}

if (process.argv[1] && process.argv[1].endsWith('collect-components.mjs')) main();
