// scripts/frame-log.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –ª–æ–≥–∞ —Ç–æ–ø-—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ñ—Ä–µ–π–º–æ–≤, —Å–µ–∫—Ü–∏–π –∏ –Ω–∞–±–æ—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü Figma
// –ó–∞–ø—É—Å–∫: node scripts/frame-log.js

import fs from "fs";
import path from "path";
import fetch from "node-fetch";
import { fileURLToPath } from "url";

// –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—É—Ç–∏ –¥–ª—è keys.js –∏ __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
import keys from "./cfg/keys.js"; // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ scripts/

const FIGMA_API_KEY = keys.API;
const FILE_KEY = keys.FILE;
const TARGET_PAGES = Array.isArray(keys.PAGES) ? keys.PAGES : [keys.PAGES || ""];

// –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
const CONFIG = {
  MAX_DEPTH: 1, // –¢–æ–ª—å–∫–æ —Ç–æ–ø-—É—Ä–æ–≤–Ω–µ–≤—ã–µ —É–∑–ª—ã (–≥–ª—É–±–∏–Ω–∞ 1 –¥–ª—è –¥–µ—Ç–µ–π CANVAS)
  EXCLUDE_PATTERNS: [/^\d+$/, /^Frame \d+$/i, /^group/i, /^rectangle/i, /^artboard/i],
  OUTPUT_FILE: path.resolve(__dirname, "../assets/generated/figma-frames.auto.js"), // generated
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
if (!FIGMA_API_KEY || !FILE_KEY) {
  console.error("‚ùå –û—à–∏–±–∫–∞: API –∏–ª–∏ FILE_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ keys.js");
  process.exit(1);
}
if (!TARGET_PAGES.length) {
  console.error("‚ùå –û—à–∏–±–∫–∞: PAGES –∏–ª–∏ PAGE –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ keys.js");
  process.exit(1);
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ FRAME, SECTION –∏ COMPONENT_SET nodes
function collectNodes(node, depth = 0, pageName = "") {
  let nodes = [];
  let badNodes = [];
  let debugInfo = [];

  if (!node) return { nodes, badNodes, debugInfo };

  // –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "‚öôÔ∏è component"
  if (pageName.toLowerCase().includes("component")) {
    debugInfo.push(`[Depth ${depth}] Node: ${node.name || "unnamed"} (Type: ${node.type})`);
  }

  if (
    (node.type === "FRAME" || node.type === "SECTION" || node.type === "COMPONENT_SET") &&
    depth <= CONFIG.MAX_DEPTH
  ) {
    const nodeName = node.name || "unnamed";
    const isTechnical = CONFIG.EXCLUDE_PATTERNS.some((pattern) => {
      const matches = pattern.test(nodeName);
      if (matches && pageName.toLowerCase().includes("component")) {
        debugInfo.push(`[Depth ${depth}] Excluded: ${nodeName} (Type: ${node.type}) matches pattern ${pattern}`);
      }
      return matches;
    });

    if (!isTechnical) {
      nodes.push(nodeName);
      if (pageName.toLowerCase().includes("component")) {
        debugInfo.push(`[Depth ${depth}] Included: ${nodeName} (Type: ${node.type})`);
      }
    } else {
      badNodes.push(nodeName);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–µ–π, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –≥–ª—É–±–∏–Ω–∞
  if (node.children && depth < CONFIG.MAX_DEPTH) {
    for (const child of node.children) {
      const {
        nodes: childNodes,
        badNodes: childBadNodes,
        debugInfo: childDebugInfo,
      } = collectNodes(child, depth + 1, pageName);
      nodes = [...nodes, ...childNodes];
      badNodes = [...badNodes, ...childBadNodes];
      debugInfo = [...debugInfo, ...childDebugInfo];
    }
  }

  return { nodes, badNodes, debugInfo };
}

// –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function findPage(document, pageName) {
  if (!document || !Array.isArray(document.children)) {
    console.error("‚ùå –û—à–∏–±–∫–∞: –î–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π");
    return null;
  }
  if (!pageName) {
    console.log("‚ÑπÔ∏è PAGE –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:", document.children[0]?.name || "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return document.children[0] || null;
  }
  const page = document.children.find((page) => String(page.name).toLowerCase() === String(pageName).toLowerCase());
  if (!page) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: –°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  }
  return page;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function generateNodeLog() {
  try {
    console.log("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö Figma...");
    const response = await fetch(`https://api.figma.com/v1/files/${FILE_KEY}`, {
      headers: { "X-Figma-Token": FIGMA_API_KEY },
    });
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    const figmaData = await response.json();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    const logData = {};
    let totalNodes = 0;
    let totalBadNodes = 0;

    for (const pageName of TARGET_PAGES) {
      console.log("üîé –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", pageName || "–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
      const page = findPage(figmaData.document, pageName);
      if (!page) {
        console.warn(`‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        logData[pageName || "default"] = {
          nodeKeys: [],
          toExtract: [], // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π toExtract
          bad_nodes: [],
          recommendations: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
        };
        continue;
      }

      console.log(`üìÑ –°–±–æ—Ä —É–∑–ª–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "${pageName}"`);
      const { nodes, badNodes, debugInfo } = collectNodes(page, 0, pageName);

      // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ nodeKeys
      const uniqueNodes = [...new Set(nodes)];

      // –í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "‚öôÔ∏è component"
      // if (pageName.toLowerCase().includes("component")) {
      //   console.log(`\n=== –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "${pageName}" ===`);
      //   console.log(debugInfo.join("\n"));
      //   console.log(`=== –ö–æ–Ω–µ—Ü –æ—Ç–ª–∞–¥–∫–∏ ===\n`);
      // }

      logData[pageName || "default"] = {
        nodeKeys: uniqueNodes.sort((a, b) => a.localeCompare(b)),
        toExtract: [], // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π toExtract –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        bad_nodes: badNodes.sort((a, b) => a.localeCompare(b)),
        recommendations:
          "–î–æ–±–∞–≤—å—Ç–µ –∏–º–µ–Ω–∞ –∏–∑ nodeKeys –≤ toExtract –≤ figmaFrames.json. –ò—Å–∫–ª—é—á–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —É–∑–ª—ã —á–µ—Ä–µ–∑ EXCLUDE_NODES.",
      };

      totalNodes += uniqueNodes.length;
      totalBadNodes += badNodes.length;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const outputDir = path.dirname(CONFIG.OUTPUT_FILE);
    console.log(`üìÇ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${outputDir}`);
    console.log(`üìù –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${CONFIG.OUTPUT_FILE}`);

    try {
      fs.mkdirSync(outputDir, { recursive: true });
      console.log("‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", outputDir);
      const jsModule =
        "// AUTO-GENERATED by scripts/figmaFrames.js ‚Äî DO NOT EDIT\nexport default " +
        JSON.stringify(logData, null, 2) +
        ";\n";
      fs.writeFileSync(CONFIG.OUTPUT_FILE, jsModule, "utf8");
      console.log(`‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ ${CONFIG.OUTPUT_FILE}`);
      console.log(`‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤: ${totalNodes}, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö/–ø—É—Å—Ç—ã—Ö: ${totalBadNodes} (—Å–º. bad_nodes)`);
    } catch (writeErr) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${writeErr.message}`);
      console.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—É—Ç–∏:", outputDir);
      process.exit(1);
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", err.message || err);
    console.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ FIGMA_API_KEY, FILE_KEY, PAGES –≤ keys.js –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Figma API");
    process.exit(1);
  }
}

generateNodeLog();
